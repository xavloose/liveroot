#!/bin/bash

if [ "$1" = "liveroot" ]; then

elif [ "$1" = "sysoroot" ]; then

else

fi

# build the oroot install hook

# check which binary to add to oroot install hook

# finish writing the oroot install hook

# output header for oroot hook + overlay_flush header

# generate part of the overlay_flush script
genOverlayFlush() {
  read b
  # sort the kernel cmdline parameters alphabetically
  for a in $(sort <(for c in $b; do echo $c; done)); do
    case "$a" in
      cryptdevice*UUID*)
        crypt_root="${a#cryptdevice=UUID=}"
	#cat
        ;;
      cryptdevice)
        crypt_root="${a#cryptdevice=}"
        #cat
        ;;
      cryptkey*UUID)
        cryptkey_root="${a#cryptkey=UUID=}"
        #cat
        unset cryptkey_root
        ;;
      cryptkey*)
        cryptkey_root="${a#cryptkey=}"
        #cat
        unset cryptkey_root
        ;;
      root*UUID*)
        # need to newline before fi for cryptsetup to break \
        if [ "$crypt_root" ]; then
          #cat
        else
          #cat
        fi
        ;;
      root*)
        if [ "$crypt_root" ]; then
          #cat
        else
          #cat
        fi
        ;;
    esac
  done
  unset b
}

# interpret kernel cmdline options and pass to above loop
genOverlayFlush </proc/cmdline

# use mount options

# rsync code

# unmount and remove drive

# close the device in overlay_flush
closeOverlayFlush() {
  read b
  for a in $b; do
    case "$a" in
      cryptkey*)
        #cat
        ;;
      cryptdevice*UUID*)
        #cat
        ;;
      cryptdevice*)
        #cat
        ;;
    esac
  done;
  unset b
}

# interpret kernel cmdline options and pass to above loop
closeOverlayFlush </proc/cmdline

# setuid for overlay_flush

# check and mount root device
checkRootDev() {
  read b
  for a in $b; do
    case "$a" in
      root*UUID*)
        #cat
        ;;
      root*)
        #cat
        ;;
    esac
  done;
  unset b
}

checkRootDev </proc/cmdline

if [ "$1" = "btrfs" ]; then
   #cat
fi


# read $oroot and generate ram device

#  generate either btrfs or ext2 device

# mount zdevice

# if using btrfs + oroot=live; load most recent snapshot

# unmount /troot when using oroot=live

# close device if oroot=live
closeDevice() {
  read b
  for a in $b; do
    case "$a" in
      cryptdevice*UUID*)
        #cat
        ;;
      cryptdevice*)
        #cat
        ;;
    esac
  done
  unset b
}

closeDevice </proc/cmdline

# finish setting up ram device

# close oroot hook
